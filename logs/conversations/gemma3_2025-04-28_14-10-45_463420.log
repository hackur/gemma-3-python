2025-04-28 14:10:45.467 | INFO     | __main__:<module>:134 - Loading model from gemma-3-4b-it-q4_0/gemma-3-4b-it-q4_0.gguf
2025-04-28 14:10:45.900 | INFO     | __main__:<module>:141 - Model loaded successfully
2025-04-28 14:10:45.911 | INFO     | __main__:<module>:274 - Starting Gemma3 API Server...
2025-04-28 14:10:46.339 | INFO     | __main__:create_chat_completion:164 - Starting conversation 20250428_141046
2025-04-28 14:10:46.339 | DEBUG    | __main__:create_chat_completion:193 - Formatted prompt for conversation 20250428_141046:
You are a helpful AI assistant with access to function calling capabilities.

When you need to use a function:
1. Analyze if the user's request requires using an available function
2. If yes, respond ONLY with a JSON object in this format:
{
    "name": "function_name",
    "arguments": {
        "param1": "value1",
        "param2": "value2"
    }
}
3. If no function is needed, respond naturally as a helpful assistant

Your responses should be:
- Concise and direct
- Focused on the task at hand
- In valid JSON format when calling functions
- In natural language when no function is needed

DO NOT:
- Include explanations when calling functions
- Mix JSON and natural language
- Make assumptions about unavailable functions
- Use functions not listed in the available functions section

User: What is the current CPU usage?

Available functions:
Function: get_system_info
Description: Get system information
Parameters: {
  "type": "object",
  "properties": {
    "info_type": {
      "type": "string",
      "enum": [
        "cpu",
        "memory",
        "disk",
        "all"
      ]
    }
  },
  "required": [
    "info_type"
  ]
}

Remember to respond with a valid JSON function call if needed.

Assistant:
2025-04-28 14:10:49.933 | DEBUG    | __main__:create_chat_completion:204 - Raw model response for conversation 20250428_141046:
```json
{
    "name": "get_system_info",
    "arguments": {
        "info_type": "cpu"
    }
}
```
2025-04-28 14:10:49.933 | INFO     | __main__:create_chat_completion:226 - Executing function get_system_info for conversation 20250428_141046
2025-04-28 14:10:50.941 | DEBUG    | __main__:create_chat_completion:233 - Function result for conversation 20250428_141046:
{
  "status": "success",
  "result": {
    "cpu": {
      "percent": 31.4,
      "count": 16,
      "freq": {
        "current": 4056,
        "min": 1020,
        "max": 4056
      },
      "stats": {
        "ctx_switches": 80939,
        "interrupts": 247254,
        "soft_interrupts": 151813655,
        "syscalls": 1773564
      }
    }
  }
}
2025-04-28 14:10:50.978 | INFO     | __main__:create_chat_completion:164 - Starting conversation 20250428_141050
2025-04-28 14:10:50.978 | DEBUG    | __main__:create_chat_completion:193 - Formatted prompt for conversation 20250428_141050:
You are a helpful AI assistant with access to function calling capabilities.

When you need to use a function:
1. Analyze if the user's request requires using an available function
2. If yes, respond ONLY with a JSON object in this format:
{
    "name": "function_name",
    "arguments": {
        "param1": "value1",
        "param2": "value2"
    }
}
3. If no function is needed, respond naturally as a helpful assistant

Your responses should be:
- Concise and direct
- Focused on the task at hand
- In valid JSON format when calling functions
- In natural language when no function is needed

DO NOT:
- Include explanations when calling functions
- Mix JSON and natural language
- Make assumptions about unavailable functions
- Use functions not listed in the available functions section

User: Run sample_script.py with argument test

Available functions:
Function: execute_python
Description: Execute a Python script with specified arguments
Parameters: {
  "type": "object",
  "properties": {
    "script_name": {
      "type": "string",
      "description": "Name of the Python script to execute"
    },
    "arguments": {
      "type": "string",
      "description": "Command line arguments for the script"
    }
  },
  "required": [
    "script_name"
  ]
}

Remember to respond with a valid JSON function call if needed.

Assistant:
2025-04-28 14:10:54.688 | DEBUG    | __main__:create_chat_completion:204 - Raw model response for conversation 20250428_141050:
```json
{
    "name": "execute_python",
    "arguments": {
        "script_name": "sample_script.py",
        "arguments": "test"
    }
}
```
2025-04-28 14:10:54.688 | INFO     | __main__:create_chat_completion:226 - Executing function execute_python for conversation 20250428_141050
2025-04-28 14:10:54.715 | DEBUG    | __main__:create_chat_completion:233 - Function result for conversation 20250428_141050:
{
  "status": "success",
  "result": {
    "stdout": "{\n  \"received_args\": [\n    \"test\"\n  ],\n  \"processed\": true,\n  \"count\": 1\n}\n",
    "stderr": "",
    "return_code": 0
  }
}
2025-04-28 14:10:54.724 | INFO     | __main__:create_chat_completion:164 - Starting conversation 20250428_141054
2025-04-28 14:10:54.724 | DEBUG    | __main__:create_chat_completion:193 - Formatted prompt for conversation 20250428_141054:
You are a helpful AI assistant with access to function calling capabilities.

When you need to use a function:
1. Analyze if the user's request requires using an available function
2. If yes, respond ONLY with a JSON object in this format:
{
    "name": "function_name",
    "arguments": {
        "param1": "value1",
        "param2": "value2"
    }
}
3. If no function is needed, respond naturally as a helpful assistant

Your responses should be:
- Concise and direct
- Focused on the task at hand
- In valid JSON format when calling functions
- In natural language when no function is needed

DO NOT:
- Include explanations when calling functions
- Mix JSON and natural language
- Make assumptions about unavailable functions
- Use functions not listed in the available functions section

User: Get all system information including CPU, memory, and disk usage

Available functions:
Function: get_system_info
Description: Get system information
Parameters: {
  "type": "object",
  "properties": {
    "info_type": {
      "type": "string",
      "enum": [
        "cpu",
        "memory",
        "disk",
        "all"
      ]
    }
  },
  "required": [
    "info_type"
  ]
}

Remember to respond with a valid JSON function call if needed.

Assistant:
2025-04-28 14:10:57.935 | DEBUG    | __main__:create_chat_completion:204 - Raw model response for conversation 20250428_141054:
```json
{
    "name": "get_system_info",
    "arguments": {
        "info_type": "all"
    }
}
```
2025-04-28 14:10:57.935 | INFO     | __main__:create_chat_completion:226 - Executing function get_system_info for conversation 20250428_141054
2025-04-28 14:10:58.943 | DEBUG    | __main__:create_chat_completion:233 - Function result for conversation 20250428_141054:
{
  "status": "success",
  "result": {
    "cpu": {
      "percent": 28.3,
      "count": 16,
      "freq": {
        "current": 4056,
        "min": 1020,
        "max": 4056
      },
      "stats": {
        "ctx_switches": 78470,
        "interrupts": 241656,
        "soft_interrupts": 151878962,
        "syscalls": 1774720
      }
    },
    "memory": {
      "total": 68719476736,
      "available": 30362664960,
      "percent": 55.8,
      "used": 32139427840,
      "free": 961265664
    },
    "disk": {
      "total": 1995218165760,
      "used": 11239985152,
      "free": 32643051520,
      "percent": 25.6
    }
  }
}
